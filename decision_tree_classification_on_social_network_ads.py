# -*- coding: utf-8 -*-
"""Decision_Tree_Classification_on_Social_Network_Ads.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MU6YgfrZS9Ydq0pZg6FCqAB_fVaBQkyz

#ðŸŒ¸ Forouzan Fallah ðŸŒ¸

Github: [Forouzanfallah](https://github.com/forouzanfallah)

Personal Website: [Forouzanfallah.ir](https://forouzanfallah.ir)

Don't hesitate to contact me for any further questions â˜º

you can read more about this algorithm on [DataCamp](https://www.datacamp.com/community/tutorials/decision-tree-classification-python)

# Decision Tree Classification

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from matplotlib.colors import ListedColormap

"""## Importing the dataset"""

dataset = pd.read_csv('Social_Network_Ads.csv')

"""##Separate the features and the label"""

X = dataset.iloc[:, [2, 3]].values
y = dataset.iloc[:, -1].values

print(X)

print(y)

"""## Splitting the dataset into the Training and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""## Feature Scaling

Actually, for the classification, we don't need scaling. We just do it for the last part, The result visualization part.
"""

from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)

"""## Training the Decision Tree Classification model on the Training set"""

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy')
classifier.fit(X_train, y_train)

"""## Predicting the Test set results"""

y_pred = classifier.predict(X_test)

"""## Making the Confusion Matrix"""

from sklearn.metrics import confusion_matrix
from sklearn.metrics import plot_confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print(cm)
disp = plot_confusion_matrix(classifier, X_test, y_test, cmap=plt.cm.Blues)
plt.show()

"""## Visualising the Training set results"""

plt.title('Decision Tree Classification on Training set')

X1, X2 = np.meshgrid(np.arange(start = X_train[:, 0].min() - 1, stop = X_train[:, 0].max() + 1, step = 0.01), np.arange(start = X_train[:, 1].min() - 1, stop = X_train[:, 1].max() + 1, step = 0.01))

plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.8, cmap = ListedColormap(('pink', 'cyan')))

for i, j in enumerate(np.unique(y_train)):
    plt.scatter(X_train[y_train == j, 0], X_train[y_train == j, 1], c = ListedColormap(('magenta', 'blue'))(i), label = j)
   
plt.show()

"""## Visualising the Test set results"""

plt.title('Decision Tree Classification on Test set')

X1, X2 = np.meshgrid(np.arange(start = X_test[:, 0].min() - 1, stop = X_test[:, 0].max() + 1, step = 0.01), np.arange(start = X_test[:, 1].min() - 1, stop = X_test[:, 1].max() + 1, step = 0.01))

plt.contourf(X1, X2, classifier.predict(np.array([X1.ravel(), X2.ravel()]).T).reshape(X1.shape), alpha = 0.8, cmap = ListedColormap(('pink', 'cyan')))

for i, j in enumerate(np.unique(y_test)):
    plt.scatter(X_test[y_test == j, 0], X_test[y_test == j, 1], c = ListedColormap(('magenta', 'blue'))(i), label = j)

plt.show()